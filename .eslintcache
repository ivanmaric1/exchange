[{"C:\\Users\\Ivan\\Desktop\\exchange\\src\\index.tsx":"1","C:\\Users\\Ivan\\Desktop\\exchange\\src\\ExchangeMaster2.tsx":"2","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Homepage.tsx":"3","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\HomePage.tsx":"4","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\CurrencyList.tsx":"5","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Currency.tsx":"6","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Menu.tsx":"7","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\HomeSection.tsx":"8","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\SellSection.tsx":"9","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\BuySection.tsx":"10","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Total.tsx":"11","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionSection.tsx":"12","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\OptionsSection.tsx":"13","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Loader.tsx":"14","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionBox.tsx":"15","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\fire.tsx":"16","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\FilterTransactions.tsx":"17","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionItem.tsx":"18"},{"size":293,"mtime":1609337466444,"results":"19","hashOfConfig":"20"},{"size":219,"mtime":1608756746573,"results":"21","hashOfConfig":"20"},{"size":165,"mtime":1608071688896,"results":"22","hashOfConfig":"20"},{"size":994,"mtime":1609334878247,"results":"23","hashOfConfig":"20"},{"size":1547,"mtime":1609083808693,"results":"24","hashOfConfig":"20"},{"size":565,"mtime":1609083240581,"results":"25","hashOfConfig":"20"},{"size":897,"mtime":1608302880807,"results":"26","hashOfConfig":"20"},{"size":1363,"mtime":1609245766501,"results":"27","hashOfConfig":"20"},{"size":3668,"mtime":1609085045849,"results":"28","hashOfConfig":"20"},{"size":4354,"mtime":1609224464481,"results":"29","hashOfConfig":"20"},{"size":823,"mtime":1609083465471,"results":"30","hashOfConfig":"20"},{"size":4145,"mtime":1609255838950,"results":"31","hashOfConfig":"20"},{"size":3776,"mtime":1609252179580,"results":"32","hashOfConfig":"20"},{"size":248,"mtime":1608368716593,"results":"33","hashOfConfig":"20"},{"size":4890,"mtime":1609258185295,"results":"34","hashOfConfig":"20"},{"size":538,"mtime":1608619021238,"results":"35","hashOfConfig":"20"},{"size":2490,"mtime":1609256012284,"results":"36","hashOfConfig":"20"},{"size":726,"mtime":1609222466529,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ko46cq",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\Ivan\\Desktop\\exchange\\src\\index.tsx",[],["81","82"],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\ExchangeMaster2.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Homepage.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\HomePage.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\CurrencyList.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Currency.tsx",[],["83","84"],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Menu.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\HomeSection.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\SellSection.tsx",["85","86"],"import React, { useState, useEffect } from 'react';\r\nimport CurrencyList from './CurrencyList';\r\nimport Total from './Total';\r\nimport TransactionBox from './TransactionBox';\r\nimport axios from 'axios';\r\nimport fire from './fire';\r\nimport './BuySellSection.scss';\r\n\r\nconst SellSection = () => {\r\n  const totalRef = fire.database().ref('/total');\r\n  const [dataBaseKey, setDataBaseKey] = useState('');\r\n  const [dataBaseData, setDataBaseData] = useState('');\r\n  const [currencyList, setCurrencyList] = useState('');\r\n  const [currency, setCurrency] = useState({\r\n    aud: '',\r\n    cad: '',\r\n    czk: '',\r\n    dkk: '',\r\n    huf: '',\r\n    jpy: '',\r\n    nok: '',\r\n    sek: '',\r\n    chf: '',\r\n    gpb: '',\r\n    usd: '',\r\n    bam: '',\r\n    eur: '',\r\n    pln: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://thingproxy.freeboard.io/fetch/https://api.hnb.hr/tecajn/v1`)\r\n      .then((res) => {\r\n        setCurrencyList(res.data);\r\n        setCurrency({\r\n          aud: res.data[0]['Prodajni za devize'],\r\n          cad: res.data[1]['Prodajni za devize'],\r\n          czk: res.data[2]['Prodajni za devize'],\r\n          dkk: res.data[3]['Prodajni za devize'],\r\n          huf: res.data[4]['Prodajni za devize'],\r\n          jpy: res.data[5]['Prodajni za devize'],\r\n          nok: res.data[6]['Prodajni za devize'],\r\n          sek: res.data[7]['Prodajni za devize'],\r\n          chf: res.data[8]['Prodajni za devize'],\r\n          gpb: res.data[9]['Prodajni za devize'],\r\n          usd: res.data[10]['Prodajni za devize'],\r\n          bam: res.data[11]['Prodajni za devize'],\r\n          eur: res.data[12]['Prodajni za devize'],\r\n          pln: res.data[13]['Prodajni za devize'],\r\n        });\r\n      });\r\n\r\n    const gotData = (data: any) => {\r\n      let bank = data.val();\r\n      setDataBaseKey(Object.keys(bank)[0]);\r\n      setDataBaseData(bank[Object.keys(bank)[0]]);\r\n    };\r\n\r\n    const errData = (err: any) => {\r\n      console.log(err);\r\n    };\r\n    const database = fire.database();\r\n    totalRef.on('value', gotData, errData);\r\n  }, []);\r\n\r\n  const changeTotal = (\r\n    chosenCurrency: string,\r\n    value: string,\r\n    result: string\r\n  ) => {\r\n    const currencyForUpdate = chosenCurrency.toUpperCase();\r\n    const dataFromServer: any = dataBaseData;\r\n    const oldValue: any = dataFromServer[currencyForUpdate];\r\n    const updatedValue = Number(oldValue) - Number(value);\r\n    const hrkFromServer = dataFromServer['HRK'];\r\n    const updatedHrk = Number(hrkFromServer) + Number(result);\r\n    const time = new Date();\r\n    const year = time.getFullYear();\r\n    const month = time.getMonth() + 1;\r\n    const date = time.getDate();\r\n    const hours = time.getHours();\r\n    const minutes = time.getMinutes();\r\n\r\n    const baseRef = fire.database().ref('total').child(dataBaseKey);\r\n    baseRef.update({\r\n      [currencyForUpdate]: updatedValue,\r\n      HRK: updatedHrk.toFixed(2),\r\n    });\r\n\r\n    const historyRef = fire.database().ref('history');\r\n    let newTransaction = historyRef.push();\r\n    newTransaction.set({\r\n      method: 'sell',\r\n      currency: currencyForUpdate,\r\n      amount: value,\r\n      payed: result,\r\n      date: `${year}-${month}-${date}`,\r\n      time: `${hours}:${minutes}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"SellSection\">\r\n      <div className=\"SellSection-transaction\">\r\n        <Total total={dataBaseData} />\r\n        <TransactionBox\r\n          changeTotal={changeTotal}\r\n          currency={currency}\r\n          method={'Sell'}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"SellSection-list\">\r\n        <CurrencyList currencyList={currencyList} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SellSection;\r\n","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\BuySection.tsx",["87","88","89"],"import React, { useState, useEffect } from 'react';\r\nimport CurrencyList from './CurrencyList';\r\nimport Total from './Total';\r\nimport TransactionBox from './TransactionBox';\r\nimport axios from 'axios';\r\nimport fire from './fire';\r\nimport './BuySellSection.scss';\r\n\r\nconst BuySection = () => {\r\n  const totalRef = fire.database().ref('/total');\r\n  const historyRef = fire.database().ref('/history');\r\n  const [dataBaseKey, setDataBaseKey] = useState('');\r\n  const [dataBaseData, setDataBaseData] = useState('');\r\n  const [hasData, setHasData] = useState(true);\r\n  const [currencyList, setCurrencyList] = useState('');\r\n  const [currency, setCurrency] = useState({\r\n    aud: '',\r\n    cad: '',\r\n    czk: '',\r\n    dkk: '',\r\n    huf: '',\r\n    jpy: '',\r\n    nok: '',\r\n    sek: '',\r\n    chf: '',\r\n    gpb: '',\r\n    usd: '',\r\n    bam: '',\r\n    eur: '',\r\n    pln: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://thingproxy.freeboard.io/fetch/https://api.hnb.hr/tecajn/v1`)\r\n      .then((res) => {\r\n        setCurrencyList(res.data);\r\n        setCurrency({\r\n          aud: res.data[0]['Kupovni za devize'],\r\n          cad: res.data[1]['Kupovni za devize'],\r\n          czk: res.data[2]['Kupovni za devize'],\r\n          dkk: res.data[3]['Kupovni za devize'],\r\n          huf: res.data[4]['Kupovni za devize'],\r\n          jpy: res.data[5]['Kupovni za devize'],\r\n          nok: res.data[6]['Kupovni za devize'],\r\n          sek: res.data[7]['Kupovni za devize'],\r\n          chf: res.data[8]['Kupovni za devize'],\r\n          gpb: res.data[9]['Kupovni za devize'],\r\n          usd: res.data[10]['Kupovni za devize'],\r\n          bam: res.data[11]['Kupovni za devize'],\r\n          eur: res.data[12]['Kupovni za devize'],\r\n          pln: res.data[13]['Kupovni za devize'],\r\n        });\r\n      });\r\n\r\n    const gotData = (data: any) => {\r\n      let bank = data.val();\r\n      setDataBaseKey(Object.keys(bank)[0]);\r\n      setDataBaseData(bank[Object.keys(bank)[0]]);\r\n    };\r\n\r\n    const errData = (err: any) => {\r\n      console.log(err);\r\n    };\r\n    const database = fire.database();\r\n    totalRef.on('value', gotData, errData);\r\n\r\n    const gotHistory = (data: any) => {\r\n      const keys = Object.keys(data.val());\r\n      if (keys[0] === 'empty') {\r\n        setHasData(false);\r\n      }\r\n    };\r\n\r\n    const errHistory = (err: any) => {\r\n      console.log(err);\r\n    };\r\n    const history = fire.database();\r\n    historyRef.on('value', gotHistory, errHistory);\r\n  }, []);\r\n\r\n  const changeTotal = (\r\n    chosenCurrency: string,\r\n    value: string,\r\n    result: string\r\n  ) => {\r\n    const currencyForUpdate = chosenCurrency.toUpperCase();\r\n    const dataFromServer: any = dataBaseData;\r\n    const oldValue: any = dataFromServer[currencyForUpdate];\r\n    const updatedValue = Number(oldValue) + Number(value);\r\n    const hrkFromServer = dataFromServer['HRK'];\r\n    const updatedHrk = Number(hrkFromServer) - Number(result);\r\n    const time = new Date();\r\n    const year = time.getFullYear();\r\n    const month = time.getMonth() + 1;\r\n    const date = time.getDate();\r\n    const hours = time.getHours();\r\n    const minutes = time.getMinutes();\r\n\r\n    const baseRef = fire.database().ref('total').child(dataBaseKey);\r\n    baseRef.update({\r\n      [currencyForUpdate]: updatedValue,\r\n      HRK: updatedHrk.toFixed(2),\r\n    });\r\n\r\n    if (!hasData) {\r\n      historyRef.set({\r\n        first: {\r\n          method: 'buy',\r\n          currency: currencyForUpdate,\r\n          amount: value,\r\n          payed: result,\r\n          date: `${year}-${month}-${date}`,\r\n          time: `${hours}:${minutes}`,\r\n        },\r\n      });\r\n    } else {\r\n      let newTransaction = historyRef.push();\r\n      newTransaction.set({\r\n        method: 'buy',\r\n        currency: currencyForUpdate,\r\n        amount: value,\r\n        payed: result,\r\n        date: `${year}-${month}-${date}`,\r\n        time: `${hours}:${minutes}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"BuySection\">\r\n      <div className=\"BuySection-transaction\">\r\n        <Total total={dataBaseData} />\r\n        <TransactionBox\r\n          changeTotal={changeTotal}\r\n          currency={currency}\r\n          method={'Buy'}\r\n        />\r\n      </div>\r\n      <div className=\"BuySection-list\">\r\n        <CurrencyList currencyList={currencyList} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuySection;\r\n","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Total.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionSection.tsx",["90","91","92"],"import React, { Component, useEffect, useState } from 'react';\r\nimport FilterTransactions from './FilterTransactions';\r\nimport TransactionItem from './TransactionItem';\r\nimport Loader from './Loader';\r\nimport fire from './fire';\r\nimport './TransactionSection.scss';\r\n\r\ninterface User {\r\n  amount: string;\r\n  currency: string;\r\n  date: string;\r\n  id: string;\r\n  method: string;\r\n  payed: string;\r\n  time: string;\r\n}\r\n\r\nconst Statistics = () => {\r\n  const [history, setHistory] = useState<User[]>();\r\n  const [filterSort, setFilterSort] = useState('');\r\n  const [filterAmount, setFilterAmount] = useState('');\r\n  const [filterCurrency, setFilterCurrency] = useState('');\r\n  const [filterDate, setFilterDate] = useState('LATEST');\r\n  const [filterStartDate, setFilterStartDate] = useState('');\r\n  const [filterEndDate, setFilterEndDate] = useState('');\r\n  const historyRef = fire.database().ref('/history');\r\n\r\n  useEffect(() => {\r\n    const gotData = (data: any) => {\r\n      let transformedData = data.val();\r\n      const fetchedData = [];\r\n      for (let key in transformedData) {\r\n        fetchedData.push({\r\n          ...transformedData[key],\r\n          id: key,\r\n        });\r\n      }\r\n      setHistory(fetchedData);\r\n    };\r\n\r\n    const errData = (err: any) => {\r\n      console.log(err);\r\n    };\r\n    const database = fire.database();\r\n    historyRef.on('value', gotData, errData);\r\n  }, []);\r\n\r\n  const renderTransactions = () => {\r\n    let forRender: any[] = [];\r\n\r\n    history?.map((item) =>\r\n      forRender.push(\r\n        <TransactionItem\r\n          amount={item.amount}\r\n          currency={item.currency}\r\n          date={item.date}\r\n          payed={item.payed}\r\n          time={item.time}\r\n          method={item.method}\r\n        />\r\n      )\r\n    );\r\n\r\n    if (filterSort) {\r\n      if (filterSort === 'BUY') {\r\n        forRender = forRender.filter((item) => item.props.method === 'buy');\r\n      } else {\r\n        forRender = forRender.filter((item) => item.props.method === 'sell');\r\n      }\r\n    }\r\n    if (filterAmount) {\r\n      if (filterAmount === 'HIGH') {\r\n        forRender = forRender.sort((a, b) => b.props.payed - a.props.payed);\r\n      } else {\r\n        forRender = forRender.sort((a, b) => a.props.payed - b.props.payed);\r\n      }\r\n    }\r\n    if (filterCurrency) {\r\n      forRender = forRender.filter(\r\n        (item) => item.props.currency === filterCurrency\r\n      );\r\n    }\r\n    if (filterDate) {\r\n      if (filterDate === 'LATEST') {\r\n        forRender = forRender.sort((a: any, b: any) => {\r\n          a = new Date(a.props.date);\r\n          b = new Date(b.props.date);\r\n          return b - a;\r\n        });\r\n      } else {\r\n        forRender = forRender.sort((a: any, b: any) => {\r\n          a = new Date(a.props.date);\r\n          b = new Date(b.props.date);\r\n          return a - b;\r\n        });\r\n      }\r\n    }\r\n    if (filterStartDate) {\r\n      forRender = forRender.filter((item) => {\r\n        item = new Date(item.props.date);\r\n        let selectedDate = new Date(filterStartDate);\r\n        if (item > selectedDate) {\r\n          return item;\r\n        } else {\r\n          return null;\r\n        }\r\n      });\r\n    }\r\n    if (filterEndDate) {\r\n      forRender = forRender.filter((item) => {\r\n        item = new Date(item.props.date);\r\n        let selectedDate = new Date(filterEndDate);\r\n        if (item < selectedDate) {\r\n          return item;\r\n        } else {\r\n          return null;\r\n        }\r\n      });\r\n    }\r\n    return forRender;\r\n  };\r\n\r\n  return (\r\n    <div className=\"TransactionSection\" data-simplebar>\r\n      <FilterTransactions\r\n        setFilterSort={setFilterSort}\r\n        setFilterAmount={setFilterAmount}\r\n        setFilterDate={setFilterDate}\r\n        setFilterCurrency={setFilterCurrency}\r\n        setFilterStartDate={setFilterStartDate}\r\n        setFilterEndDate={setFilterEndDate}\r\n      />\r\n      <table className=\"TransactionSection-table\">\r\n        {history ? (\r\n          renderTransactions()\r\n        ) : (\r\n          <div className=\"TransactionSection-loader\">\r\n            <Loader />\r\n          </div>\r\n        )}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\OptionsSection.tsx",["93","94","95","96"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport fire from './fire';\r\nimport './OptionsSection.scss';\r\n\r\nconst Options = () => {\r\n  const [dataBaseData, setDataBaseData] = useState('');\r\n  const [dataBaseKey, setDataBaseKey] = useState('');\r\n  const totalRef = fire.database().ref('/total');\r\n  const historyRef = fire.database().ref('/history');\r\n  const amount: any = useRef();\r\n\r\n  useEffect(() => {\r\n    const gotData = (data: any) => {\r\n      let bank = data.val();\r\n      setDataBaseKey(Object.keys(bank)[0]);\r\n      setDataBaseData(bank[Object.keys(bank)[0]]);\r\n    };\r\n\r\n    const errData = (err: any) => {\r\n      console.log(err);\r\n    };\r\n    const database = fire.database();\r\n    totalRef.on('value', gotData, errData);\r\n  }, []);\r\n\r\n  const deleteTransactions = () => {\r\n    historyRef.set({\r\n      empty: {\r\n        method: 'NO HISTORY',\r\n        currency: 'NO HISTORY',\r\n        amount: 'NO HISTORY',\r\n        payed: 'NO HISTORY',\r\n        date: 'NO HISTORY',\r\n        time: 'NO HISTORY',\r\n      },\r\n    });\r\n  };\r\n\r\n  const addFounds = () => {\r\n    const value = amount.current.value;\r\n    const dataFromServer: any = dataBaseData;\r\n    const hrkFromServer = dataFromServer['HRK'];\r\n    const updatedHrk = Number(value) + Number(hrkFromServer);\r\n    const bankRef = totalRef.child(dataBaseKey);\r\n    bankRef.update({\r\n      HRK: updatedHrk.toFixed(2),\r\n    });\r\n    amount.current.value = '';\r\n  };\r\n\r\n  const resetAll = () => {\r\n    const dataFromServer: any = dataBaseData;\r\n    const bankRef = totalRef.child(dataBaseKey);\r\n    bankRef.set({\r\n      HRK: 100000,\r\n      AUD: 0,\r\n      CAD: 0,\r\n      CZK: 0,\r\n      DKK: 0,\r\n      HUF: 0,\r\n      JPY: 0,\r\n      NOK: 0,\r\n      SEK: 0,\r\n      CHF: 0,\r\n      GPB: 0,\r\n      USD: 0,\r\n      BAM: 0,\r\n      EUR: 0,\r\n      PLM: 0,\r\n    });\r\n  };\r\n\r\n  const resetForeign = () => {\r\n    const dataFromServer: any = dataBaseData;\r\n    const bankRef = totalRef.child(dataBaseKey);\r\n    bankRef.update({\r\n      AUD: 0,\r\n      CAD: 0,\r\n      CZK: 0,\r\n      DKK: 0,\r\n      HUF: 0,\r\n      JPY: 0,\r\n      NOK: 0,\r\n      SEK: 0,\r\n      CHF: 0,\r\n      GPB: 0,\r\n      USD: 0,\r\n      BAM: 0,\r\n      EUR: 0,\r\n      PLM: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"OptionsSection\">\r\n      <div className=\"OptionsSection-option\">\r\n        <h3>Transactions</h3>\r\n        <div className=\"OptionsSection-option-box\">\r\n          <p>Delete all transactions</p>\r\n          <button\r\n            className=\"OptionsSection-btn\"\r\n            onClick={() => deleteTransactions()}\r\n          >\r\n            Obriši\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"OptionsSection-option\">\r\n        <h3>Deposit</h3>\r\n        <div className=\"OptionsSection-option-box\">\r\n          <p>Add funds to deposit</p>\r\n          <div>\r\n            <input type=\"text\" placeholder=\"Iznos\" ref={amount} />\r\n            <button className=\"OptionsSection-btn\" onClick={() => addFounds()}>\r\n              Add to deposit\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"OptionsSection-option-box\">\r\n          <p>Reset deposit to its original settings</p>\r\n          <button\r\n            className=\"OptionsSection-btn danger\"\r\n            onClick={() => resetAll()}\r\n          >\r\n            Reset all\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"OptionsSection-option\">\r\n        <h3>Foreign currency</h3>\r\n        <div className=\"OptionsSection-option-box\">\r\n          <p>Change of foreign currency in the bank</p>\r\n          <button className=\"OptionsSection-btn\" onClick={() => resetForeign()}>\r\n            Payoff foreign currency for the bank\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\Loader.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionBox.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\fire.tsx",[],"C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\FilterTransactions.tsx",["97"],"import { Console } from 'console';\r\nimport React from 'react';\r\nimport './FilterTransactions.scss';\r\n\r\ninterface Props {\r\n  setFilterSort: (str: string) => void;\r\n  setFilterAmount: (str: string) => void;\r\n  setFilterDate: (str: string) => void;\r\n  setFilterCurrency: (str: string) => void;\r\n  setFilterStartDate: (str: string) => void;\r\n  setFilterEndDate: (str: string) => void;\r\n}\r\n\r\nconst FilterTransactions: React.FC<Props> = ({\r\n  setFilterSort,\r\n  setFilterAmount,\r\n  setFilterDate,\r\n  setFilterCurrency,\r\n  setFilterStartDate,\r\n  setFilterEndDate,\r\n}) => {\r\n  return (\r\n    <div className=\"FilterTransactions\">\r\n      <select onChange={(e: any) => setFilterSort(e.target.value)}>\r\n        <option value=\"\">BUYED AND SOLD</option>\r\n        <option value=\"BUY\">BUYED</option>\r\n        <option value=\"SELL\">SOLD</option>\r\n      </select>\r\n      <select onChange={(e: any) => setFilterAmount(e.target.value)}>\r\n        <option value=\"\">ORDER BY AMOUNT PAYED</option>\r\n        <option value=\"HIGH\">FROM HIGHEST</option>\r\n        <option value=\"LOW\">FROM LOWEST</option>\r\n      </select>\r\n      <select onChange={(e: any) => setFilterCurrency(e.target.value)}>\r\n        <option value=\"\">ORDER BY CURRENCY</option>\r\n        <option value=\"AUD\">AUD</option>\r\n        <option value=\"CAD\">CAD</option>\r\n        <option value=\"CZK\">CZK</option>\r\n        <option value=\"DKK\">DKK</option>\r\n        <option value=\"HUF\">HUF</option>\r\n        <option value=\"JPY\">JPY</option>\r\n        <option value=\"NOK\">NOK</option>\r\n        <option value=\"SEK\">SEK</option>\r\n        <option value=\"CHF\">CHF</option>\r\n        <option value=\"GPB\">GPB</option>\r\n        <option value=\"USD\">USD</option>\r\n        <option value=\"BAM\">BAM</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"PLN\">PLN</option>\r\n      </select>\r\n      <select onChange={(e: any) => setFilterDate(e.target.value)}>\r\n        <option value=\"\">ORDER BY DATE</option>\r\n        <option value=\"LATEST\" selected>\r\n          FROM THE LATEST\r\n        </option>\r\n        <option value=\"OLDEST\">FROM THE OLDEST</option>\r\n      </select>\r\n\r\n      <label>\r\n        FROM\r\n        <input\r\n          type=\"date\"\r\n          onChange={(e: any) => setFilterStartDate(e.target.value)}\r\n        />\r\n      </label>\r\n      <label>\r\n        TO\r\n        <input\r\n          type=\"date\"\r\n          onChange={(e: any) => setFilterEndDate(e.target.value)}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterTransactions;\r\n","C:\\Users\\Ivan\\Desktop\\exchange\\src\\components\\TransactionItem.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"102"},{"ruleId":"100","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":63,"column":11,"nodeType":"106","messageId":"107","endLine":63,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":65,"column":6,"nodeType":"110","endLine":65,"endColumn":8,"suggestions":"111"},{"ruleId":"104","severity":1,"message":"105","line":65,"column":11,"nodeType":"106","messageId":"107","endLine":65,"endColumn":19},{"ruleId":"104","severity":1,"message":"112","line":78,"column":11,"nodeType":"106","messageId":"107","endLine":78,"endColumn":18},{"ruleId":"108","severity":1,"message":"113","line":80,"column":6,"nodeType":"110","endLine":80,"endColumn":8,"suggestions":"114"},{"ruleId":"104","severity":1,"message":"115","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":44,"column":11,"nodeType":"106","messageId":"107","endLine":44,"endColumn":19},{"ruleId":"108","severity":1,"message":"116","line":46,"column":6,"nodeType":"110","endLine":46,"endColumn":8,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"105","line":22,"column":11,"nodeType":"106","messageId":"107","endLine":22,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":24,"column":6,"nodeType":"110","endLine":24,"endColumn":8,"suggestions":"118"},{"ruleId":"104","severity":1,"message":"119","line":52,"column":11,"nodeType":"106","messageId":"107","endLine":52,"endColumn":30},{"ruleId":"104","severity":1,"message":"119","line":74,"column":11,"nodeType":"106","messageId":"107","endLine":74,"endColumn":30},{"ruleId":"104","severity":1,"message":"120","line":1,"column":10,"nodeType":"106","messageId":"107","endLine":1,"endColumn":17},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],["121"],["122"],"@typescript-eslint/no-unused-vars","'database' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'totalRef'. Either include it or remove the dependency array.","ArrayExpression",["123"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'historyRef' and 'totalRef'. Either include them or remove the dependency array.",["124"],"'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'historyRef'. Either include it or remove the dependency array.",["125"],["126"],"'dataFromServer' is assigned a value but never used.","'Console' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"127","fix":"133"},"Update the dependencies array to be: [totalRef]",{"range":"134","text":"135"},"Update the dependencies array to be: [historyRef, totalRef]",{"range":"136","text":"137"},"Update the dependencies array to be: [historyRef]",{"range":"138","text":"139"},{"range":"140","text":"135"},[2041,2043],"[totalRef]",[2463,2465],"[historyRef, totalRef]",[1390,1392],"[historyRef]",[757,759]]